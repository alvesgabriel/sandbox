#!/bin/bash

echo "Start run..."

# Project name
read -r -p 'Enter with your project name: ' PROJECT_NAME

# gitignore file content
GITIGNORE=$(cat <<-EOF
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# pyenv
.python-version

# celery beat schedule file
celerybeat-schedule

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/

# Postgres files for local development
.pgdata

EOF
)

MODELS_BASE=$(cat <<-EOF
from django.contrib.auth.base_user import AbstractBaseUser, BaseUserManager
from django.contrib.auth.models import PermissionsMixin
from django.core.mail import send_mail
from django.db import models
from django.utils.translation import gettext_lazy as _
from django.utils import timezone


class UserManager(BaseUserManager):
    use_in_migrations = True

    def _create_user(self, email, password, **extra_fields):
        """
        Creates and saves a User with the given email and password.
        """
        if not email:
            raise ValueError("The given email must be set")
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_user(self, email, password=None, **extra_fields):
        extra_fields.setdefault("is_superuser", False)
        return self._create_user(email, password, **extra_fields)

    def create_superuser(self, email, password, **extra_fields):
        extra_fields.setdefault("is_superuser", True)
        extra_fields.setdefault("is_staff", True)

        if extra_fields.get("is_superuser") is not True:
            raise ValueError("Superuser must have is_superuser=True.")
        if extra_fields.get("is_staff") is not True:
            raise ValueError("Superuser must have is_staff=True.")

        return self._create_user(email, password, **extra_fields)


class User(AbstractBaseUser, PermissionsMixin):
    """
    App base User class.

    Email and password are required. Other fields are optional.
    """

    first_name = models.CharField(_("first name"), max_length=150, blank=True)
    email = models.EmailField(_("email address"), unique=True)
    is_staff = models.BooleanField(
        _("staff status"),
        default=False,
        help_text=_("Designates whether the user can log into this admin site."),
    )
    is_active = models.BooleanField(
        _("active"),
        default=True,
        help_text=_(
            "Designates whether this user should be treated as active. " "Unselect this instead of deleting accounts."
        ),
    )
    date_joined = models.DateTimeField(_("date joined"), default=timezone.now)

    objects = UserManager()

    EMAIL_FIELD = "email"
    USERNAME_FIELD = EMAIL_FIELD
    REQUIRED_FIELDS = []

    class Meta:
        verbose_name = _("user")
        verbose_name_plural = _("users")

    def clean(self):
        super().clean()
        self.email = self.__class__.objects.normalize_email(self.email)

    def get_full_name(self):
        """
        Return the first_name plus the last_name, with a space in between.
        """
        full_name = "%s" % (self.first_name)
        return full_name.strip()

    def get_short_name(self):
        """Return the short name for the user."""
        return self.first_name

    def email_user(self, subject, message, from_email=None, **kwargs):
        """Send an email to this user."""
        send_mail(subject, message, from_email, [self.email], **kwargs)
EOF
)

ADMIN_BASE=$(cat <<-EOF
from django.conf import settings
from django.contrib import admin, messages
from django.contrib.admin.options import IS_POPUP_VAR
from django.contrib.admin.utils import unquote
from django.contrib.auth import update_session_auth_hash
from django.contrib.auth.forms import AdminPasswordChangeForm, UserChangeForm, UserCreationForm
from django.core.exceptions import PermissionDenied
from django.db import router, transaction
from django.http import Http404, HttpResponseRedirect
from django.template.response import TemplateResponse
from django.urls import path, reverse
from django.utils.decorators import method_decorator
from django.utils.html import escape
from django.utils.translation import gettext
from django.utils.translation import gettext_lazy as _
from django.views.decorators.csrf import csrf_protect
from django.views.decorators.debug import sensitive_post_parameters

from $PROJECT_NAME.base.models import User

csrf_protect_m = method_decorator(csrf_protect)
sensitive_post_parameters_m = method_decorator(sensitive_post_parameters())


@admin.register(User)
class UserAdmin(admin.ModelAdmin):
    add_form_template = "admin/auth/user/add_form.html"
    change_user_password_template = None
    fieldsets = (
        (None, {"fields": ("first_name", "email", "password")}),
        (
            _("Permissions"),
            {
                "fields": ("is_active", "is_staff", "is_superuser", "groups", "user_permissions"),
            },
        ),
        (_("Important dates"), {"fields": ("last_login", "date_joined")}),
    )
    add_fieldsets = (
        (
            None,
            {
                "classes": ("wide",),
                "fields": ("first_name", "email", "password1", "password2"),
            },
        ),
    )
    form = UserChangeForm
    add_form = UserCreationForm
    change_password_form = AdminPasswordChangeForm
    list_display = ("email", "first_name", "is_staff")
    list_filter = ("is_staff", "is_superuser", "is_active", "groups")
    search_fields = ("first_name", "email")
    ordering = ("first_name",)
    filter_horizontal = (
        "groups",
        "user_permissions",
    )

    def get_fieldsets(self, request, obj=None):
        if not obj:
            return self.add_fieldsets
        return super().get_fieldsets(request, obj)

    def get_form(self, request, obj=None, **kwargs):
        """
        Use special form during user creation
        """
        defaults = {}
        if obj is None:
            defaults["form"] = self.add_form
        defaults.update(kwargs)
        return super().get_form(request, obj, **defaults)

    def get_urls(self):
        return [
            path(
                "<id>/password/",
                self.admin_site.admin_view(self.user_change_password),
                name="auth_user_password_change",
            ),
        ] + super().get_urls()

    def lookup_allowed(self, lookup, value):
        # Don't allow lookups involving passwords.
        return not lookup.startswith("password") and super().lookup_allowed(lookup, value)

    @sensitive_post_parameters_m
    @csrf_protect_m
    def add_view(self, request, form_url="", extra_context=None):
        with transaction.atomic(using=router.db_for_write(self.model)):
            return self._add_view(request, form_url, extra_context)

    def _add_view(self, request, form_url="", extra_context=None):
        # It's an error for a user to have add permission but NOT change
        # permission for users. If we allowed such users to add users, they
        # could create superusers, which would mean they would essentially have
        # the permission to change users. To avoid the problem entirely, we
        # disallow users from adding users if they don't have change
        # permission.
        if not self.has_change_permission(request):
            if self.has_add_permission(request) and settings.DEBUG:
                # Raise Http404 in debug mode so that the user gets a helpful
                # error message.
                raise Http404(
                    'Your user does not have the "Change user" permission. In '
                    "order to add users, Django requires that your user "
                    'account have both the "Add user" and "Change user" '
                    "permissions set."
                )
            raise PermissionDenied
        if extra_context is None:
            extra_context = {}
        username_field = self.model._meta.get_field(self.model.USERNAME_FIELD)
        defaults = {
            "auto_populated_fields": (),
            "username_help_text": username_field.help_text,
        }
        extra_context.update(defaults)
        return super().add_view(request, form_url, extra_context)

    @sensitive_post_parameters_m
    def user_change_password(self, request, id, form_url=""):
        user = self.get_object(request, unquote(id))
        if not self.has_change_permission(request, user):
            raise PermissionDenied
        if user is None:
            raise Http404(
                _("%(name)s object with primary key %(key)r does not exist.")
                % {
                    "name": self.model._meta.verbose_name,
                    "key": escape(id),
                }
            )
        if request.method == "POST":
            form = self.change_password_form(user, request.POST)
            if form.is_valid():
                form.save()
                change_message = self.construct_change_message(request, form, None)
                self.log_change(request, user, change_message)
                msg = gettext("Password changed successfully.")
                messages.success(request, msg)
                update_session_auth_hash(request, form.user)
                return HttpResponseRedirect(
                    reverse(
                        "%s:%s_%s_change"
                        % (
                            self.admin_site.name,
                            user._meta.app_label,
                            user._meta.model_name,
                        ),
                        args=(user.pk,),
                    )
                )
        else:
            form = self.change_password_form(user)

        fieldsets = [(None, {"fields": list(form.base_fields)})]
        adminForm = admin.helpers.AdminForm(form, fieldsets, {})

        context = {
            "title": _("Change password: %s") % escape(user.get_username()),
            "adminForm": adminForm,
            "form_url": form_url,
            "form": form,
            "is_popup": (IS_POPUP_VAR in request.POST or IS_POPUP_VAR in request.GET),
            "add": True,
            "change": False,
            "has_delete_permission": False,
            "has_change_permission": True,
            "has_absolute_url": False,
            "opts": self.model._meta,
            "original": user,
            "save_as": False,
            "show_save": True,
            **self.admin_site.each_context(request),
        }

        request.current_app = self.admin_site.name

        return TemplateResponse(
            request,
            self.change_user_password_template or "admin/auth/user/change_password.html",
            context,
        )

    def response_add(self, request, obj, post_url_continue=None):
        """
        Determine the HttpResponse for the add_view stage. It mostly defers to
        its superclass implementation but is customized because the User model
        has a slightly different workflow.
        """
        # We should allow further modification of the user just added i.e. the
        # 'Save' button should behave like the 'Save and continue editing'
        # button except in two scenarios:
        # * The user has pressed the 'Save and add another' button
        # * We are adding a user in a popup
        if "_addanother" not in request.POST and IS_POPUP_VAR not in request.POST:
            request.POST = request.POST.copy()
            request.POST["_continue"] = 1
        return super().response_add(request, obj, post_url_continue)
EOF
)

# Check if pipenv is installed
if ! [ -x "$(command -v pipenv)" ]; then
    echo 'pipenv not installed'
    exit
fi 

# Check if PIPENV_VENV_IN_PROJECT is setted
if [ -z "$PIPENV_VENV_IN_PROJECT" ]; then
    printf "\nexport PIPENV_VENV_IN_PROJECT=1\n" >> ~/.bashrc
    source ~/.bashrc
fi

# Check if heroku is installed
if ! [ -x "$(command -v heroku)" ]; then
    echo 'heroku not installed'
    exit
fi

# Check if docker is installed
if ! [ -x "$(command -v docker)" ]; then
    echo 'docker not installed'
    exit
fi

# Check if docker-compose is installed
if ! [ -x "$(command -v docker-compose)" ]; then
    echo 'docker-compose not installed'
    exit
fi

# Create .gitignore file if not exists
if ! [ -f .gitignore ]; then
    echo "creating .gitignore file if not exists"
    echo "$GITIGNORE" > .gitignore
fi
GITIGNORE_DOCKER="
# Docker
.pgdata/
"
echo "$GITIGNORE_DOCKER" >> .gitignore

# Install Python dependences using pipenv
pipenv install \
django \
gunicorn \
python-decouple \
dj-database-url \
psycopg2-binary \
django-debug-toolbar \
sentry-sdk \
django-ordered-model \
ipython \
django-extensions
# Develop dependences
pipenv install --dev \
flake8 \
pytest-django \
pytest-cov \
codecov \
model-bakery \
isort
# Install black
pipenv install black --dev --pre

# Create directory to project
read -r -p "Do you want create API (DRF)? [y/N] " drf_answer
if [[ $drf_answer =~ (y|Y|yes|YES) ]]; then
    # Markdown support for the browsable API.
    pipenv install djangorestframework markdown django-filter
fi

# Create .flake8 file
echo "Creating flake8 file"
FLAKE_FILE="[flake8]
max-line-length=120
exclude=.venv,**migrations**.py"
echo "$FLAKE_FILE" > .flake8
# Configure flake8 to run before commit
pipenv run flake8 --install-hook git
git config --bool flake8.strict true

# Create pytest.ini
echo "Creating pytest.ini file"
PYTEST_FILE="[pytest]
DJANGO_SETTINGS_MODULE = $PROJECT_NAME.settings"
echo "$PYTEST_FILE" > pytest.ini

# Create CI
REPO_NAME=${PWD##*/}
GITHUB_CI="name: Python application

on: [pull_request]

jobs:
  build:
    env:
      PIPENV_NO_INHERIT: 1
      PIPENV_IGNORE_VIRTUALENVS: 1
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:11.5
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports: ['5432:5432']

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Copying configurations
      run: |
        cp contrib/env-sample .env
    - name: Install dependencies
      run: |
        pip install pipenv
        pipenv sync --dev
    - name: Lint with flake8
      run: |
        pipenv run flake8 .
    - name: Test with pytest
      run: |
        pipenv run pytest $PROJECT_NAME --cov=$PROJECT_NAME
    - name: Posting Coverage
      env:
        CODECOV_TOKEN: \"codecov token\"
      run: |
        pipenv run codecov
"
WORKFLOW=".github/workflows"
[ -d .github/workflows ] || mkdir -p $WORKFLOW
echo "$GITHUB_CI" > $WORKFLOW/django_project.yml

echo "Creating .pyup.yml"
PYUP_FILE="requirements:
    - Pipfile
    - Pipfile.lock"
echo "$PYUP_FILE" > .pyup.yml

# Generate Django project
pipenv run django-admin startproject $PROJECT_NAME .

# Create .env file
SECRET_KEY=$(python -c 'import random; print("".join([random.choice("abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)") for i in range(50)]))')
POSTGRES_PASSWORD="postgres"
POSTGRES_USER="postgres"
echo $SECRET_KEY
ENV_FILE="DEBUG=True
ALLOWED_HOSTS=localhost, 127.0.0.1
SECRET_KEY=$SECRET_KEY
DATABASE_URL=postgres://$POSTGRES_PASSWORD:$POSTGRES_USER@localhost:5433/$PROJECT_NAME
"
echo "$ENV_FILE" > .env

# Create contrib env-example file
echo "Creating contrib/env-sample"
[ -d contrib ] || mkdir contrib
ENV_SAMPLE_FILE="DEBUG=True
ALLOWED_HOSTS=localhost, 127.0.0.1
SECRET_KEY=secret key with 50 characters
DATABASE_URL=postgres://postgres:postgres@localhost/postgres"
echo "$ENV_SAMPLE_FILE" > contrib/env-sample

# Configure settings.py
echo "Updating settings.py apps"
# Add app Django Extensions
INSTALLED_APPS="    'django.contrib.staticfiles',
    'django_extensions',"
sed -i "s/'django.contrib.staticfiles',/$INSTALLED_APPS/gm" \
  $PROJECT_NAME/settings.py

# import
echo "Updating settings.py imports"
IMPORTS="from functools import partial"
IMPORTS="$IMPORTS\nfrom pathlib import Path"
IMPORTS="$IMPORTS\nimport dj_database_url"
IMPORTS="$IMPORTS\nfrom decouple import Csv, config"
sed -i "s/from pathlib import Path/$IMPORTS/gm" $PROJECT_NAME/settings.py

echo "Updating settings.py variables"
# SECRET_KEY
echo "Updating SECRET_KEY"
sed -i "s/SECRET_KEY = '.*'/SECRET_KEY = config('SECRET_KEY')/gm" $PROJECT_NAME/settings.py
# DEBUG
echo "Updating DEBUG"
sed -i "s/DEBUG = True/DEBUG = config('DEBUG', default=False, cast=bool)/gm" $PROJECT_NAME/settings.py
# ALLOWED_HOSTS
echo "Updating ALLOWED_HOSTS"
ALLOWED_HOSTS="ALLOWED_HOSTS = config('ALLOWED_HOSTS', default=[], cast=Csv())"
sed -i "s/ALLOWED_HOSTS = \[\]/$ALLOWED_HOSTS/gm" $PROJECT_NAME/settings.py
# Config DATABASES
echo "Updating DATABASES"
DEFAULT_DB_URL="default_db_url \= \"sqlite:\/\/\/\" + str\(BASE_DIR \/ 'db.sqlite3'\)"
DEFAULT_DB_URL="$DEFAULT_DB_URL\nparse_database \= partial\(dj_database_url.parse, conn_max_age=600\)\nDATABASES = {"
sed -i "s/DATABASES = {/$DEFAULT_DB_URL/gm" $PROJECT_NAME/settings.py

DATABASE_CONFIG_OLD="'default'\: {\s*'ENGINE'\: 'django.db.backends.sqlite3',\s*'NAME'\: BASE_DIR \/ 'db.sqlite3',\s*}"
DATABASE_CONFIG_NEW="'default': config('DATABASE_URL', default=default_db_url, cast=parse_database),"
sed -i -e ':a' -e 'N' -e '$!ba' -e "s/$DATABASE_CONFIG_OLD/$DATABASE_CONFIG_NEW/gm" $PROJECT_NAME/settings.py
# LANGUAGE_CODE
echo "Updating LANGUAGE_CODE"
sed -i "s/LANGUAGE_CODE = 'en-us'/LANGUAGE_CODE = 'pt-br'/gm" $PROJECT_NAME/settings.py
# TIME_ZONE
echo "Updating TIME_ZONE"
sed -i "s/TIME_ZONE = 'UTC'/TIME_ZONE = 'America\/Sao_Paulo'/gm" $PROJECT_NAME/settings.py

# Configure static and media files
echo "Updating STATIC_URL, STATIC_ROOT, MEDIA_URL, MEDIA_ROOT"
STATIC_MEDIA="STATIC_URL = '/static/'"
STATIC_MEDIA="$STATIC_MEDIA\nSTATIC_ROOT = BASE_DIR / 'staticfiles'"
STATIC_MEDIA="$STATIC_MEDIA\n\nMEDIA_URL = '/media/'"
STATIC_MEDIA="$STATIC_MEDIA\nMEDIA_ROOT = BASE_DIR / 'mediafiles'"
echo $STATIC_MEDIA
sed -i "s,STATIC_URL = '/static/',$STATIC_MEDIA," $PROJECT_NAME/settings.py

read -r -p "Do you want to use AWS or Cloudinary? [aws/cloudinary] " staticfile_answer
if [[ $staticfile_answer =~ (aws) ]]; then
  AWS_CONFIG="COLLECTFAST_ENABLE = False

AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID')

# STORAGE CONFIGURATION IN S3 AWS
# ===============================

if AWS_ACCESS_KEY_ID:
    AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
    AWS_PRELOAD_METADATA = True
    AWS_AUTO_CREATE_BUCKET = False
    AWS_QUERYSTRING_AUTH = True
    AWS_S3_CUSTOM_DOMAIN = None
    AWS_DEFAULT_ACL = 'private'

    COLLECTFAST_STRATEGY = 'collectfast.strategies.boto3.Boto3Strategy'
    COLLECTFAST_ENABLE = True

    # Static Assets
    # -------------
    STATICFILES_STORAGE = 's3_folder_storage.s3.StaticStorage'
    STATIC_S3_PATH = 'static'
    STATIC_ROOT = f'/{STATIC_S3_PATH}/'
    STATIC_URL = f'//s3.amazonaws.com/{AWS_STORAGE_BUCKET_NAME}/{STATIC_S3_PATH}/'
    ADMIN_MEDIA_PREFIX = STATIC_URL + 'admin/'

    # Upload Media Folder
    DEFAULT_FILE_STORAGE = 's3_folder_storage.s3.DefaultStorage'
    DEFAULT_S3_PATH = 'static'
    MEDIA_ROOT = f'/{DEFAULT_S3_PATH}/'
    MEDIA_URL = f'//s3.amazonaws.com/{AWS_STORAGE_BUCKET_NAME}/{DEFAULT_S3_PATH}/'

    INSTALLED_APPS.append('s3_folder_storage')
    INSTALLED_APPS.append('storages')
"
  # AWS storage app
  sed -i "s/'django.contrib.staticfiles',/'collectfast',\n'django.contrib.staticfiles',/gm" \
    $PROJECT_NAME/settings.py
  # STATIC FILES
  echo "$AWS_CONFIG" >> $PROJECT_NAME/settings.py
  AWS_ENVS="# AWS Configuration
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_STORAGE_BUCKET_NAME=
"
  echo "$AWS_ENVS" >> .env
  echo "$AWS_ENVS" >> contrib/env-sample
  pipenv install collectfast
  sed -i "s,,," $PROJECT_NAME/settings.py
fi
if [[ $staticfile_answer =~ (cloudinary) ]]; then
  CLOUDINARY_CONFING="# Cloudinary credentials
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': config('CLOUDINARY_CLOUD_NAME', default=False),
    'API_KEY': config('CLOUDINARY_API_KEY', default=False),
    'API_SECRET': config('CLOUDINARY_API_SECRET', default=False),
    'STATICFILES_MANIFEST_ROOT': BASE_DIR / 'manifest',
}

# STORAGE CONFIGURATION IN CLOUDINARY
# ===================================

if CLOUDINARY_STORAGE['CLOUD_NAME'] and CLOUDINARY_STORAGE['API_KEY'] and CLOUDINARY_STORAGE['API_SECRET']:
    STATIC_URL = '/$REPO_NAME/static/'
    MEDIA_URL = '/$REPO_NAME/media/'

    DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.RawMediaCloudinaryStorage'
    STATICFILES_STORAGE = 'cloudinary_storage.storage.StaticHashedCloudinaryStorage'
"
  # Cloudinary storage app
  sed -i "s/'django.contrib.staticfiles',/'cloudinary_storage',\n'django.contrib.staticfiles',\n'cloudinary',/gm" \
    $PROJECT_NAME/settings.py
  echo "$CLOUDINARY_CONFING" >> $PROJECT_NAME/settings.py
  CLOUDINARY_ENVS="# Cloudinary Configuration
CLOUD_NAME=
API_KEY=
API_SECRET=
"
  echo "$CLOUDINARY_ENVS" >> .env
  echo "$CLOUDINARY_ENVS" >> contrib/env-sample
  pipenv install dj3-cloudinary-storage
fi

if [[ $drf_answer =~ (y|Y|yes|YES) ]]; then
  REST_FRAMEWORK="REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
    ],
}

if DEBUG:
    REST_FRAMEWORK.get('DEFAULT_AUTHENTICATION_CLASSES').append('rest_framework.authentication.SessionAuthentication')"
  echo "$REST_FRAMEWORK" >> $PROJECT_NAME/settings.py
  echo "Adding app rest_framework..."
  INSTALLED_APPS="    'django.contrib.staticfiles',
    'rest_framework',"
  sed -i "s/'django.contrib.staticfiles',/$INSTALLED_APPS/gm" \
    $PROJECT_NAME/settings.py
  echo "Configure urls..."
  URLS_FILE=$PROJECT_NAME/urls.py
  URL_IMPORTS="from django.urls import include, path"
  URL_IMPORTS="$URL_IMPORTS\nfrom rest_framework import routers"
  URL_IMPORTS="$URL_IMPORTS\n\nrouter = routers.DefaultRouter()"
  sed -i "s/from django.urls import path/$URL_IMPORTS/gm" $URLS_FILE
  ADMIN_PATHS="path('admin\/', admin.site.urls),"
  URL_PATHS="$ADMIN_PATHS\npath('', include(router.urls)),"
  URL_PATHS="$URL_PATHS\npath('', include('rest_framework.urls', namespace='rest_framework')),"
  sed -i "s/$ADMIN_PATHS/$URL_PATHS/gm" $URLS_FILE
  pipenv run black $URLS_FILE
fi


# Configure Docker Compose
echo "Creating docker-compose.yml"
DB="_database"
DOCKER_COMPOSE_FILE="version: \"3.3\"

services:
    database:
        container_name: $PROJECT_NAME$DB
        image: postgres
        volumes:
            - ./.pgdata:/var/lib/postgresql/data
        environment:
            - LC_ALL=C.UTF-8
            - POSTGRES_DB=$PROJECT_NAME
            - POSTGRES_USER=$POSTGRES_USER
            - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
        ports:
            - 5433:5432
"
echo "$DOCKER_COMPOSE_FILE" > docker-compose.yml
docker-compose up -d

# Create app base
echo "Creating app base..."
APP_BASE_DIR="$PROJECT_NAME/base"
mkdir "$APP_BASE_DIR"
pipenv run python manage.py startapp base $APP_BASE_DIR
echo "$MODELS_BASE" > $APP_BASE_DIR/models.py
echo "$ADMIN_BASE" > $APP_BASE_DIR/admin.py
sed -i "s/'django_extensions',/'django_extensions',\n'$PROJECT_NAME.base',/gm" \
  $PROJECT_NAME/settings.py
# AUTH_USER_MODEL
echo "Adding AUTH_USER_MODEL"
AUTH_USER_MODEL="AUTH_USER_MODEL = 'base.User'

# Application definition"
sed -i "s/# Application definition/$AUTH_USER_MODEL/gm" \
  $PROJECT_NAME/settings.py
rm $APP_BASE_DIR/tests.py $APP_BASE_DIR/views.py
pipenv run python manage.py makemigrations
pipenv run python manage.py migrate

# Format 
pipenv run black $PROJECT_NAME/settings.py

# Configure Heroku App
read -r -p "Do you want deploy your application o Heroku? [y/N] " heroku_answer
if [[ $heroku_answer =~ (y|Y|yes|YES) ]]; then
  read -r -p "Enter with your heroku app name: " HEROKU_APP_NAME
  heroku apps:create $HEROKU_APP_NAME
  PROCFILE="release: python manage.py migrate --noinput
  web: gunicorn $PROJECT_NAME.wsgi --log-file -"
  echo "$PROCFILE" > Procfile
  git remote -v
  heroku config:set DISABLE_COLLECTSTATIC=1
  heroku config:set DEBUG=False
  SECRET_KEY=$(python -c 'import random; print("".join([random.choice("abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)") for i in range(50)]))')
  heroku config:set SECRET_KEY=$SECRET_KEY
  HOST=$(heroku info -s | grep web_url | cut -d / -f3)
  heroku config:set ALLOWED_HOSTS=$HOST
  git add .
  git commit -m ":rocket: Create automatic Django App"
  BRANCH_LOCAL="$(git branch | grep \* | cut -d ' ' -f2)"
  git push heroku $BRANCH_LOCAL:master -f
  heroku open
fi

# Push to Github
read -r -p "Do you want to make push to Github? [y/N] " push_answer
if [[ $push_answer =~ (y|Y|yes|YES) ]]; then
  git push --set-upstream origin $BRANCH_LOCAL
fi

echo "End run!"
